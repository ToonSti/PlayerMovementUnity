/*

// call in void update
// horizontal movement
Vector3 movement = new Vector3(x, 0, z);                    // make the movement variable
movement = Vector3.ClampMagnitude(movement, 1);             // make sure maximal speed is 1 to every side (normalize)
transform.Translate(movement * speed * Time.deltaTime);     // apply movement to object

// call in update
// vertical movement (jumping)
rb.AddForce(new Vector2(0f, jumpForce));                    // apply force up with an amount of force

float x = Input.GetAxis("Horizontal");                      // get the input corresponding to the x axis
float z = Input.GetAxis("Vertical");                        // get the input corresponding to the z axis


For the animation PlayerMove, I could have just sped up the PlayerIdle animation, but since you will probably never use the Idle animation sped up, I changed the animation anyway.
In case you would like to speed up your animation:
    https://docs.unity3d.com/ScriptReference/Animator-speed.html
I dont know if this is the best and correct way of speeding up. 
Since I think you speed up the entire animator with this, you will probably have to set the speed value back to the original when switching to PlayerIdle and before PlayerJump.
(the link is also in Sources under "Other:".)

If the player moves on ground that is not flat, it may be possible to add multiple groundchecks (on every corner for example). 
The conditions for the if statement can be all the groundchecks connected with an or (||).
something like:

private bool isGrounded;

    bool IsGrounded()
    {
        if (Physics.CheckSphere(groundCheck1.position, groundRadius, isGround) || Physics.CheckSphere(groundCheck2.position, groundRadius, isGround) || Physics.CheckSphere(groundCheck3.position, groundRadius, isGround) || Physics.CheckSphere(groundCheck4.position, groundRadius, isGround))  
        {
            isGrounded = true;
        }
        else
        {
            isGrounded = false;
        }
        return isGrounded;
    }

I don't know if that works or even is possible or is the most efficient way, I did not check it yet.

Something I did not check instead of this is this way of making a groundcheck:
    https://www.immersivelimit.com/tutorials/simple-character-controller-for-unity
    (the link is also in Sources under "Other:".)

I would like to try this, so a character works well on slopes, but I have to find the time to understand the Math in C#. It uses a raycast instead of a checksphere.

|                                                                             |
v https://forum.unity.com/threads/third-person-camera-movement-script.858673/ v

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CameraController : MonoBehaviour
{

    private const float YMin = -90.0f;
    private const float YMax = 90.0f;
    private const float XMin = -90.0f;
    private const float XMax = 90.0f;

    public Transform lookAt;

    public float distance = 10.0f;
    private float currentX = 0.0f;
    private float currentY = 0.0f;
    public float sensivity = 350f;


    // Update is called once per frame
    void FixedUpdate()
    {
        currentX += Input.GetAxis("Mouse X") * sensivity * Time.deltaTime;
        currentY += Input.GetAxis("Mouse Y") * sensivity * Time.deltaTime;

        currentY = Mathf.Clamp(currentY, YMin, YMax);
        currentX = Mathf.Clamp(currentX, XMin, XMax);

        Vector3 Direction = new Vector3(0, 0, -distance);
        Quaternion rotation = Quaternion.Euler(currentY, currentX, 0);
        transform.position = lookAt.position + rotation * Direction;

        transform.LookAt(lookAt.position);
    }
} 

public bool IsGrounded()
{
    // check for isGround at a groundRadius radius around the groundCheck
    return Physics.CheckSphere(groundCheck.position, groundRadius, isGround);
}

// if there are inputs, execute the code
if (horizontalMove != Vector3.zero)
{
    // makes the wanted rotation
    Quaternion toRotation = Quaternion.LookRotation(horizontalMove, Vector3.up);
    // rotates the player to the needed rotation over a period of time
    transform.rotation = Quaternion.RotateTowards(transform.rotation, toRotation, rotationSpeed * Time.deltaTime);
}

if (Physics.CheckSphere(capsBottom, cc.radius / Mathf.Cos(Mathf.Deg2Rad * groundAngle) - cc.radius * Mathf.Sin(Mathf.Deg2Rad * groundAngle), isGround))
Physics.CheckSphere(capsBottom + new Vector3 (0, cc.radius, 0), cc.radius + .1f)



// function called everytime IsGrounded() is mentioned in a script, a boolean value is returned
    public bool IsGrounded()
    {
        // calculate the capsule bottom in worldspace, because the ray needs to be checked in world space
        capsBottom = transform.TransformPoint(cc.center - Vector3.up * cc.height / 2f);
        // make a ray from .01 above the capsBottom pointing down
        var Ground = new Ray(capsBottom + transform.up * .01f, -transform.up);
        // get the data from the Ground ray
        RaycastHit groundData;
        // if the Ground ray hits something withing 5 times the capsuleradius that is considered ground in the layermask
        if (Physics.Raycast(Ground, out groundData, isGround))
        {
            // calculate the angle  that the ground is from the player
            groundAngle = Vector3.Angle(groundData.normal, transform.up);
            // calculate the distance the Ground ray should be poinding from the ground with the calculated angle, leaving a .01 margin (see ray Ground) using a trigonometric function
            groundDist = cc.radius / Mathf.Cos(Mathf.Deg2Rad * groundAngle) - cc.radius + .02f;
            // if the angle is lower than the set slopelimit, allow the player to be grounded
            if (groundAngle < maxSlopeLimit)
            {
                // if the measured distance is smaller than the calculated distance
                if (groundData.distance < groundDist)
                {
                    // return true, so that the player is grounded
                    return true;
                }
                else if (groundData.distance > groundDist && Physics.CheckSphere(capsBottom, (cc.radius / Mathf.Cos(Mathf.Deg2Rad * groundAngle) - cc.radius) * Mathf.Sin(Mathf.Deg2Rad * groundAngle), isGround))
                {
                    return true;
                }
                else if (Physics.CheckSphere(capsBottom, .2f, isGround) && groundData.distance > groundDist && groundAngle == 0f)
                {
                    return true;
                }
                else { return false; }
            }
            else if (groundAngle > maxSlopeLimit && groundData.distance > groundDist && Physics.CheckSphere(capsBottom, .2f, isGround))
            {
                 return true;
            }
            else{ return false; }
        }else{ return false; }
    }


    public bool IsCeiled()
    {
        // calculate the current top of the Capsule Collider
        capsTop = transform.TransformPoint(cc.center + Vector3.up * cc.height / 2f);
        // create a ray that checks from the capsTop aiming up
        var Ceiling = new Ray(capsTop, transform.up);
        // store the raydata
        RaycastHit ceilingData;
        // if the ray hits something below the normal player height that is ground (the function should only be called when the player is crouched)
        if (Physics.Raycast(Ceiling, out ceilingData, cc.height - cc.height * playerCrouchHeight, isGround))
        {
            // return true so there should be a ceiling above the player
            return true;
        }
        // else so if the ray hits nothing
        else
        {
            // return true so there should be no ceiling above the player
            return false;
        }
    }

// change Capsule Collider height to crouch
cc.height = Mathf.Lerp(cc.height, playerHeight * playerCrouchHeight, crouchLerp);
// change Capsule Collider height to uncrouch
cc.height = Mathf.Lerp(cc.height, playerHeight, crouchLerp);



*/
